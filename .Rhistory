import datetime
# defining a decorator
def print_start_end(f):
def wrapper(**args):
print("Starting function call...")
f()
print("Finished function call...")
return wrapper
def todays_date():
print(datetime.datetime.today())
print(datetime.datetime.today())
todays_date()
def todays_date():
print(datetime.datetime.today())
todays_date()
print_start_end(todays_date)
@print_decorator
def todays_date():
print(datetime.datetime.today())
todays_date()
@print_start_end
def todays_date():
print(datetime.datetime.today())
todays_date()
todays_date()
source("solvinglp.R")
#entering a model with LP format
P02.sol <- SolverLP("LP/P02.mod")
install.packages("Rglpk")
#entering a model with LP format
P02.sol <- SolverLP("LP/P02.mod")
P02.sol$df
#entering a model in MathProg format
prod.sol <- SolverLP("MathProg/prodAmpl.mod", method = "MathProg")
prod.sol$df
#entering a model with LP format
P01b.sol <- SolverLP("LP/P01_b.mod")
P01b.sol$df
#entering a model with LP format
P01a.sol <- SolverLP("LP/P01_a.mod")
P01a.sol$df
# with corrected values to match the book
P02b.sol <- SolverLP("LP/P02_b.mod")
P02b.sol$df
P03.sol <- SolverLP("LP/P03.mod")
P03a.sol <- SolverLP("LP/P03_a.mod")
P03a.sol$df
P03b.sol <- SolverLP("LP/P03_b.mod")
P03b.sol$df
P04.sol <- SolverLP("LP/P04.mod")
P04.sol$df
# Filling up each truck always
P04b.sol <- SolverLP("LP/P04_b.mod")
P04b.sol$df
# Filling up each truck always - turns out to be more expensive, but maybe can be rewritten to fill up only the bigger one
P05a.sol <- SolverLP("LP/P05_a.mod")
P05a.sol$df
# Filling up each truck always - turns out to be more expensive, but maybe can be rewritten to fill up only the bigger one
P05b.sol <- SolverLP("LP/P05_b.mod")
P05b.sol$df
# Filling up each truck always - turns out to be more expensive, but maybe can be rewritten to fill up only the bigger one
P05c.sol <- SolverLP("LP/P05_c.mod")
P05c.sol$df
P06a.sol <- SolverLP("LP/P06_a.mod")
P06a.sol$df
install.packages(c("broom", "car", "covr", "crosstalk", "dendextend", "dplyr", "FactoMineR", "forcats", "foreign", "fs", "ggplot2", "ggraph", "ggrepel", "glue", "graphlayouts", "ISOcodes", "lava", "lifecycle", "matrixStats", "ModelMetrics", "modeltools", "mvtnorm", "nlme", "nloptr", "party", "plyr", "quantmod", "Rcpp", "recipes", "rlang", "ROI", "roxygen2", "shiny", "sp", "survival", "testthat", "tidytext", "tinytex", "vcd", "vctrs", "VIM", "xml2"))
install.packages("Rglpk")
install.packages("Rglpk")
install.packages(c("foreign", "lattice", "nlme", "nnet", "survival"))
P07.sol <- SolverLP("LP/P07.mod")
P07.sol$df
install.packages("Rsymphony")
install.packages("Rsymphony")
setwd("~/Dropbox/VOS/01-Sources/LP/JMSL")
n <- 50
set.seed(1)
c <- matrix(sample(1:1000, n*n, replace=TRUE), n, n)
Assignment01 <- function(c){
n <- dim(c)[1]
coef <- as.vector(t(c))
rhs <- rep(1, 2*n)
Amatrix <- matrix(0, 2*n, n*n)
for(i in 1:n){
for(j in 1:n){
Amatrix[i, n*(i-1)+j] <-1
}
}
for(i in 1:n){
for(j in 1:n){
Amatrix[n+i, n*(j-1)+i] <- 1
}
}
signs <- rep("==", 2*n)
var_type <- rep("B", 2*n)
library(Rglpk)
solution <- Rglpk_solve_LP(obj=coef, mat=Amatrix, dir=signs, types=var_type, rhs=rhs, max=TRUE)
matrix(solution$solution[1:(n*n)], n, n, byrow=TRUE)
}
Assignment02 <- function(c){
n <- dim(c)[1]
coef <- c(rep(0,n*n), 1)
rhs <- c(rep(1, 2*n), rep(0, n))
Amatrix <- matrix(0, 3*n, n*n + 1)
for(i in 1:n){
for(j in 1:n){
Amatrix[i, n*(i-1)+j] <-1
}
}
for(i in 1:n){
for(j in 1:n){
Amatrix[n+i, n*(j-1)+i] <- 1
}
}
for(i in 1:n){
for(j in 1:n){
Amatrix[2*n+i, n*(j-1)+i] <- c[j, i]
}
}
for(i in 1:n){
Amatrix[2*n+i, n*n + 1] <- -1
}
signs <- c(rep("==", 2*n), rep(">=", n))
var_type <- c(rep("B", n*n), "C")
#     library(Rglpk)
#     solutionPL <- Rglpk_solve_LP(obj=coef, mat=Amatrix, dir=signs, types=var_type, rhs=rhs, max=TRUE)
library(Rsymphony)
solutionPL <- Rsymphony_solve_LP(obj=coef, mat=Amatrix, dir=signs, types=var_type, rhs=rhs, max=TRUE)
matrix(solutionPL$solution[1:(n*n)], n, n, byrow=TRUE)
}
solAss01 <- Assignment01(c)
solAss02 <- Assignment02(c)
solAss01
solAss02
library(Rsymphony)
sessionInfo()
View(P02b.sol)
install.packages(c("lpSolve", "lpSolveAPI"))
